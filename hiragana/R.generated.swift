//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `MainColor`.
    static let mainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainColor")
    
    /// `UIColor(named: "MainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `Arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow")
    
    /// `UIImage(named: "Arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.conf` struct is generated, and contains static references to 3 localization keys.
    struct conf {
      /// Value: f6ddb2822e2f9ba4939976ea1f65c7cd222913ed2cdb1cd11fa9533b7970ff09
      static let app_id = Rswift.StringResource(key: "app_id", tableName: "conf", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hiragana
      static let output_type = Rswift.StringResource(key: "output_type", tableName: "conf", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://labs.goo.ne.jp/api/hiragana
      static let api_url = Rswift.StringResource(key: "api_url", tableName: "conf", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: f6ddb2822e2f9ba4939976ea1f65c7cd222913ed2cdb1cd11fa9533b7970ff09
      static func app_id(_: Void = ()) -> String {
        return NSLocalizedString("app_id", tableName: "conf", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: hiragana
      static func output_type(_: Void = ()) -> String {
        return NSLocalizedString("output_type", tableName: "conf", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: https://labs.goo.ne.jp/api/hiragana
      static func api_url(_: Void = ()) -> String {
        return NSLocalizedString("api_url", tableName: "conf", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.ui` struct is generated, and contains static references to 6 localization keys.
    struct ui {
      /// Value: OK
      static let btn_ok = Rswift.StringResource(key: "btn_ok", tableName: "ui", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: リトライします
      static let retry_confirm = Rswift.StringResource(key: "retry_confirm", tableName: "ui", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 入力された文字が無効です
      static let input_validation = Rswift.StringResource(key: "input_validation", tableName: "ui", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 時間をおき、通信環境の 良いところで再度お試しください
      static let take_time = Rswift.StringResource(key: "take_time", tableName: "ui", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 記号以外の文字を 1文字以上入力してください
      static let input_letters = Rswift.StringResource(key: "input_letters", tableName: "ui", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通信に失敗しました
      static let connection_failure = Rswift.StringResource(key: "connection_failure", tableName: "ui", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: OK
      static func btn_ok(_: Void = ()) -> String {
        return NSLocalizedString("btn_ok", tableName: "ui", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: リトライします
      static func retry_confirm(_: Void = ()) -> String {
        return NSLocalizedString("retry_confirm", tableName: "ui", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 入力された文字が無効です
      static func input_validation(_: Void = ()) -> String {
        return NSLocalizedString("input_validation", tableName: "ui", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 時間をおき、通信環境の 良いところで再度お試しください
      static func take_time(_: Void = ()) -> String {
        return NSLocalizedString("take_time", tableName: "ui", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 記号以外の文字を 1文字以上入力してください
      static func input_letters(_: Void = ()) -> String {
        return NSLocalizedString("input_letters", tableName: "ui", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通信に失敗しました
      static func connection_failure(_: Void = ()) -> String {
        return NSLocalizedString("connection_failure", tableName: "ui", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "MainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
